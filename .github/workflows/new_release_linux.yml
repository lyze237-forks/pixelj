# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*linux' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build_linux:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true

    - name: Attach release asset without JRE
      id: attach_release_asset_without_jre_linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/pixelj-without-jre-1.0-SNAPSHOT-linux.zip
        asset_name: pixelj-without-jre-1.0-SNAPSHOT-linux.zip
        asset_content_type: application/zip

    - name: Attach release asset with JRE
      id: attach_release_asset_with_jre_linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/pixelj-with-jre-1.0-SNAPSHOT-linux.zip
        asset_name: pixelj-with-jre-1.0-SNAPSHOT-linux.zip
        asset_content_type: application/zip
